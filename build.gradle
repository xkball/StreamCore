buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'


archivesBaseName = mod_name
version = 'mc' + mc_version + '-' + mod_version
group = 'com.xkball.stream_core'
// version = '1.0'
// group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
// archivesBaseName = 'modid'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
//    def args = [
//            //"-Dfml.coreMods.load=ink.ikx.rt.impl.internal.core.CoreModBoot",
//            "-Dmixin.hotSwap=true",
//            "-Dmixin.checks.interfaces=true",
//            "-torg.spongepowered.asm.launch.MixinTweaker"
//           // "-Dmixin.debug.export=true"
//    ]
   // clientJvmArgs.addAll(args)
    //serverJvmArgs.addAll(args)
//    makeObfSourceJar = false
   runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg    "-Dmixin.hotSwap=true"
            arg    "-Dmixin.checks.interfaces=true"
            arg    "-torg.spongepowered.asm.launch.MixinTweaker"
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg    "-Dmixin.hotSwap=true"
            arg    "-Dmixin.checks.interfaces=true"
            arg    "-torg.spongepowered.asm.launch.MixinTweaker"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    implementation 'org.spongepowered:mixin:0.8.2'
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": "0",
            "ForceLoadAsMod": "true",
            "Specification-Title": mod_name,
            "Specification-Vendor": "",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor" :"streamcoresareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

mixin {
    add sourceSets.main, "mixins.stream_core.refmap.json"
    config 'mixins.stream_core.json'

    debug.export = true
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
compileJava.options.encoding = 'UTF-8'

//sourceSets {
//    main {
//        output.resourcesDir = output.classesDir
//        //ext.refMap = "mixins.stream_core.refmap.json"
//    }
//}